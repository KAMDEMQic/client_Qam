{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Text, Left, Right, ListItem, Thumbnail, Body } from \"native-base\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../Redux/Actions/cartActions\";\nimport Toast from \"react-native-toast-message\";\nimport axios from \"axios\";\nimport baseURL from \"../../../assets/common/baseUrl\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar Confirm = function Confirm(props) {\n  var finalOrder = props.route.params;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      productUpdate = _useState2[0],\n      setProductUpdate = _useState2[1];\n\n  useEffect(function () {\n    if (finalOrder) {\n      getProducts(finalOrder);\n    }\n\n    return function () {\n      setProductUpdate();\n    };\n  }, [props]);\n\n  var getProducts = function getProducts(x) {\n    var order = x.order.order;\n    var products = [];\n\n    if (order) {\n      order.orderItems.forEach(function (cart) {\n        axios.get(baseURL + \"products/\" + cart.product).then(function (data) {\n          products.push(data.data);\n          setProductUpdate(products);\n        }).catch(function (e) {\n          console.log(e);\n        });\n      });\n    }\n  };\n\n  var confirmOrder = function confirmOrder() {\n    var order = finalOrder.order.order;\n    axios.post(baseURL + \"orders\", order).then(function (res) {\n      if (res.status == 200 || res.status == 201) {\n        Toast.show({\n          topOffset: 60,\n          type: \"success\",\n          text1: \"Order Completed\",\n          text2: \"\"\n        });\n        setTimeout(function () {\n          props.clearCart();\n          props.navigation.navigate(\"Cart\");\n        }, 500);\n      }\n    }).catch(function (error) {\n      Toast.show({\n        topOffset: 60,\n        type: \"error\",\n        text1: \"Something went wrong\",\n        text2: \"Please try again\"\n      });\n    });\n  };\n\n  return _jsx(ScrollView, {\n    contentContainerStyle: styles.container,\n    children: _jsxs(View, {\n      style: styles.titleContainer,\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 20,\n          fontWeight: \"bold\"\n        },\n        children: \"Confirm Order\"\n      }), props.route.params ? _jsxs(View, {\n        style: {\n          borderWidth: 1,\n          borderColor: \"orange\"\n        },\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: \"Shipping to:\"\n        }), _jsxs(View, {\n          style: {\n            padding: 8\n          },\n          children: [_jsxs(Text, {\n            children: [\"Address: \", finalOrder.order.order.shippingAddress1]\n          }), _jsxs(Text, {\n            children: [\"Address2: \", finalOrder.order.order.shippingAddress2]\n          }), _jsxs(Text, {\n            children: [\"City: \", finalOrder.order.order.city]\n          }), _jsxs(Text, {\n            children: [\"Zip Code: \", finalOrder.order.order.zip]\n          }), _jsxs(Text, {\n            children: [\"Country: \", finalOrder.order.order.country]\n          })]\n        }), _jsx(Text, {\n          style: styles.title,\n          children: \"Items:\"\n        }), productUpdate && _jsx(_Fragment, {\n          children: productUpdate.map(function (x) {\n            return _jsxs(ListItem, {\n              style: styles.listItem,\n              avatar: true,\n              children: [_jsx(Left, {\n                children: _jsx(Thumbnail, {\n                  source: {\n                    uri: x.image\n                  }\n                })\n              }), _jsxs(Body, {\n                style: styles.body,\n                children: [_jsx(Left, {\n                  children: _jsx(Text, {\n                    children: x.name\n                  })\n                }), _jsx(Right, {\n                  children: _jsxs(Text, {\n                    children: [\"FcFA \", x.price]\n                  })\n                })]\n              })]\n            }, x.name);\n          })\n        })]\n      }) : null, _jsx(View, {\n        style: {\n          alignItems: \"center\",\n          margin: 20\n        },\n        children: _jsx(Button, {\n          title: \"Place order\",\n          onPress: confirmOrder\n        })\n      })]\n    })\n  });\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearCart: function clearCart() {\n      return dispatch(actions.clearCart());\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: height,\n    padding: 8,\n    alignContent: \"center\",\n    backgroundColor: \"white\"\n  },\n  titleContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 8\n  },\n  title: {\n    alignSelf: \"center\",\n    margin: 8,\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  listItem: {\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    justifyContent: \"center\",\n    width: width / 1.2\n  },\n  body: {\n    margin: 10,\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  }\n});\nexport default connect(null, mapDispatchToProps)(Confirm);","map":{"version":3,"sources":["/home/theo/Bureau/react/QAM_U/client_Qam/Screens/Cart/Checkout/Confirm.js"],"names":["React","useEffect","useState","Text","Left","Right","ListItem","Thumbnail","Body","connect","actions","Toast","axios","baseURL","Dimensions","get","width","height","Confirm","props","finalOrder","route","params","productUpdate","setProductUpdate","getProducts","x","order","products","orderItems","forEach","cart","product","then","data","push","catch","e","console","log","confirmOrder","post","res","status","show","topOffset","type","text1","text2","setTimeout","clearCart","navigation","navigate","error","styles","container","titleContainer","fontSize","fontWeight","borderWidth","borderColor","title","padding","shippingAddress1","shippingAddress2","city","zip","country","map","listItem","uri","image","body","name","price","alignItems","margin","mapDispatchToProps","dispatch","StyleSheet","create","alignContent","backgroundColor","justifyContent","alignSelf","flexDirection"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { View, StyleSheet, Dimensions, ScrollView, Button } from \"react-native\";\nimport { Text, Left, Right, ListItem, Thumbnail, Body } from \"native-base\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../Redux/Actions/cartActions\";\n\nimport Toast from \"react-native-toast-message\";\nimport axios from \"axios\";\nimport baseURL from \"../../../assets/common/baseUrl\";\n\nvar { width, height } = Dimensions.get(\"window\");\n\nconst Confirm = (props) => {\n  const finalOrder = props.route.params;\n\n  // Add this\n  const [productUpdate, setProductUpdate] = useState();\n  useEffect(() => {\n      if(finalOrder) {\n        getProducts(finalOrder);\n      }\n    return () => {\n      setProductUpdate();\n    };\n  }, [props]);\n\n  // Add this\n  const getProducts = (x) => {\n    const order = x.order.order;\n    var products = [];\n    if(order) {\n        order.orderItems.forEach((cart) => {\n            axios\n              .get(`${baseURL}products/${cart.product}`)\n              .then((data) => {\n                products.push(data.data);\n                setProductUpdate(products);\n              })\n              .catch((e) => {\n                console.log(e);\n              });\n          });\n    }\n    \n  };\n\n  const confirmOrder = () => {\n    const order = finalOrder.order.order;\n    axios\n      .post(`${baseURL}orders`, order)\n      .then((res) => {\n        if (res.status == 200 || res.status == 201) {\n          Toast.show({\n            topOffset: 60,\n            type: \"success\",\n            text1: \"Order Completed\",\n            text2: \"\",\n          });\n          setTimeout(() => {\n            props.clearCart();\n            props.navigation.navigate(\"Cart\");\n          }, 500);\n        }\n      })\n      .catch((error) => {\n        Toast.show({\n          topOffset: 60,\n          type: \"error\",\n          text1: \"Something went wrong\",\n          text2: \"Please try again\",\n        });\n      });\n  };\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <View style={styles.titleContainer}>\n        <Text style={{ fontSize: 20, fontWeight: \"bold\" }}>Confirm Order</Text>\n        {props.route.params ? (\n          <View style={{ borderWidth: 1, borderColor: \"orange\" }}>\n            <Text style={styles.title}>Shipping to:</Text>\n            <View style={{ padding: 8 }}>\n              <Text>Address: {finalOrder.order.order.shippingAddress1}</Text>\n              <Text>Address2: {finalOrder.order.order.shippingAddress2}</Text>\n              <Text>City: {finalOrder.order.order.city}</Text>\n              <Text>Zip Code: {finalOrder.order.order.zip}</Text>\n              <Text>Country: {finalOrder.order.order.country}</Text>\n            </View>\n            <Text style={styles.title}>Items:</Text>\n            {/* CHANGE THIS */}\n            {productUpdate && (\n              <>\n                {productUpdate.map((x) => {\n                  return (\n                    <ListItem style={styles.listItem} key={x.name} avatar>\n                      <Left>\n                        <Thumbnail source={{ uri: x.image }} />\n                      </Left>\n                      <Body style={styles.body}>\n                        <Left>\n                          <Text>{x.name}</Text>\n                        </Left>\n                        <Right>\n                          <Text>FcFA {x.price}</Text>\n                        </Right>\n                      </Body>\n                    </ListItem>\n                  );\n                })}\n              </>\n            )}\n          </View>\n        ) : null}\n        <View style={{ alignItems: \"center\", margin: 20 }}>\n          <Button title={\"Place order\"} onPress={confirmOrder} />\n        </View>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    clearCart: () => dispatch(actions.clearCart()),\n  };\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: height,\n    padding: 8,\n    alignContent: \"center\",\n    backgroundColor: \"white\",\n  },\n  titleContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: 8,\n  },\n  title: {\n    alignSelf: \"center\",\n    margin: 8,\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  listItem: {\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    justifyContent: \"center\",\n    width: width / 1.2,\n  },\n  body: {\n    margin: 10,\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Confirm);\n"]},"metadata":{},"sourceType":"module"}