{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Container, Text, Left, Right, H1 } from \"native-base\";\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport CartItem from \"./CartItem\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport EasyButton from \"../../Shared/StyledComponents/EasyButton\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../Redux/Actions/cartActions\";\nimport AuthGlobal from \"../../Context/store/AuthGlobal\";\nimport axios from \"axios\";\nimport baseURL from \"../../assets/common/baseUrl\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nvar Cart = function Cart(props) {\n  var context = useContext(AuthGlobal);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      productUpdate = _useState2[0],\n      setProductUpdate = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      totalPrice = _useState4[0],\n      setTotalPrice = _useState4[1];\n\n  useEffect(function () {\n    getProducts();\n    return function () {\n      setProductUpdate();\n      setTotalPrice();\n    };\n  }, [props]);\n\n  var getProducts = function getProducts() {\n    var products = [];\n    props.cartItems.forEach(function (cart) {\n      axios.get(baseURL + \"products/\" + cart.product).then(function (data) {\n        products.push(data.data);\n        setProductUpdate(products);\n        var total = 0;\n        products.forEach(function (product) {\n          var price = total += product.price;\n          setTotalPrice(price);\n        });\n      }).catch(function (e) {\n        console.log(e);\n      });\n    });\n  };\n\n  return _jsx(_Fragment, {\n    children: productUpdate ? _jsxs(Container, {\n      children: [_jsx(H1, {\n        style: {\n          alignSelf: \"center\"\n        },\n        children: \"Cart\"\n      }), _jsx(SwipeListView, {\n        data: productUpdate,\n        renderItem: function renderItem(data) {\n          return _jsx(CartItem, {\n            item: data\n          });\n        },\n        renderHiddenItem: function renderHiddenItem(data) {\n          return _jsx(View, {\n            style: styles.hiddenContainer,\n            children: _jsx(TouchableOpacity, {\n              style: styles.hiddenButton,\n              onPress: function onPress() {\n                return props.removeFromCart(data.item);\n              },\n              children: _jsx(Icon, {\n                name: \"trash\",\n                color: \"white\",\n                size: 30\n              })\n            })\n          });\n        },\n        disableRightSwipe: true,\n        previewOpenDelay: 3000,\n        friction: 1000,\n        tension: 40,\n        leftOpenValue: 75,\n        stopLeftSwipe: 75,\n        rightOpenValue: -75\n      }), _jsxs(View, {\n        style: styles.bottomContainer,\n        children: [_jsx(Left, {\n          children: _jsxs(Text, {\n            style: styles.price,\n            children: [\"$ \", totalPrice]\n          })\n        }), _jsx(Right, {\n          children: _jsx(EasyButton, {\n            danger: true,\n            medium: true,\n            onPress: function onPress() {\n              return props.clearCart();\n            },\n            children: _jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"Clear\"\n            })\n          })\n        }), _jsx(Right, {\n          children: context.stateUser.isAuthenticated ? _jsx(EasyButton, {\n            primary: true,\n            medium: true,\n            onPress: function onPress() {\n              return props.navigation.navigate('Checkout');\n            },\n            children: _jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"Checkout\"\n            })\n          }) : _jsx(EasyButton, {\n            secondary: true,\n            medium: true,\n            onPress: function onPress() {\n              return props.navigation.navigate('Login');\n            },\n            children: _jsx(Text, {\n              style: {\n                color: 'white'\n              },\n              children: \"Login\"\n            })\n          })\n        })]\n      })]\n    }) : _jsxs(Container, {\n      style: styles.emptyContainer,\n      children: [_jsx(Text, {\n        children: \"Looks like your cart is empty\"\n      }), _jsx(Text, {\n        children: \"Add products to your cart to get started\"\n      })]\n    })\n  });\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var cartItems = state.cartItems;\n  return {\n    cartItems: cartItems\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    clearCart: function clearCart() {\n      return dispatch(actions.clearCart());\n    },\n    removeFromCart: function removeFromCart(item) {\n      return dispatch(actions.removeFromCart(item));\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  emptyContainer: {\n    height: height,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  bottomContainer: {\n    flexDirection: 'row',\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'white',\n    elevation: 20\n  },\n  price: {\n    fontSize: 18,\n    margin: 20,\n    color: 'red'\n  },\n  hiddenContainer: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    flexDirection: 'row'\n  },\n  hiddenButton: {\n    backgroundColor: 'red',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n    paddingRight: 25,\n    height: 70,\n    width: width / 1.2\n  }\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","map":{"version":3,"sources":["/home/theo/Bureau/react/QAM_U/easy-shop/Screens/Cart/Cart.js"],"names":["React","useContext","useEffect","useState","Container","Text","Left","Right","H1","SwipeListView","CartItem","Icon","EasyButton","connect","actions","AuthGlobal","axios","baseURL","AsyncStorage","Dimensions","get","height","width","Cart","props","context","productUpdate","setProductUpdate","totalPrice","setTotalPrice","getProducts","products","cartItems","forEach","cart","product","then","data","push","total","price","catch","e","console","log","alignSelf","styles","hiddenContainer","hiddenButton","removeFromCart","item","bottomContainer","clearCart","color","stateUser","isAuthenticated","navigation","navigate","emptyContainer","mapStateToProps","state","mapDispatchToProps","dispatch","StyleSheet","create","alignItems","justifyContent","flexDirection","position","bottom","left","backgroundColor","elevation","fontSize","margin","flex","paddingRight"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  TouchableOpacity,\n} from \"react-native\";\nimport {\n  Container,\n  Text,\n  Left,\n  Right,\n  H1\n} from \"native-base\";\nimport { SwipeListView } from 'react-native-swipe-list-view'\nimport CartItem from './CartItem'\n\nimport Icon from \"react-native-vector-icons/FontAwesome\";\nimport EasyButton from \"../../Shared/StyledComponents/EasyButton\"\n\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../Redux/Actions/cartActions\";\nimport AuthGlobal from \"../../Context/store/AuthGlobal\"\nimport axios from \"axios\";\nimport baseURL from \"../../assets/common/baseUrl\";\nimport AsyncStorage from \"@react-native-community/async-storage\"\n\nvar { height, width } = Dimensions.get(\"window\");\n\nconst Cart = (props) => {\n\n  const context = useContext(AuthGlobal);\n\n  // Add this\n  const [productUpdate, setProductUpdate] = useState()\n  const [totalPrice, setTotalPrice] = useState()\n  useEffect(() => {\n    getProducts()\n    return () => {\n      setProductUpdate()\n      setTotalPrice()\n    }\n  }, [props])\n  \n    const getProducts = () => {\n      var products = [];\n      props.cartItems.forEach(cart => {\n        axios.get(`${baseURL}products/${cart.product}`).then(data => {\n          products.push(data.data)\n          setProductUpdate(products)\n          var total = 0;\n          products.forEach(product => {\n            const price = (total += product.price)\n              setTotalPrice(price)\n          });\n        })\n        .catch(e => {\n          console.log(e)\n        })\n      })\n    }\n\n  return (\n    <>\n      {productUpdate ? (\n        <Container>\n          <H1 style={{ alignSelf: \"center\" }}>Cart</H1>\n          <SwipeListView\n            data={productUpdate}\n            renderItem={(data) => (\n             <CartItem item={data} />\n            )}\n            renderHiddenItem={(data) => (\n              <View style={styles.hiddenContainer}>\n                <TouchableOpacity \n                style={styles.hiddenButton}\n                onPress={() => props.removeFromCart(data.item)}\n                >\n                  <Icon name=\"trash\" color={\"white\"} size={30} />\n                </TouchableOpacity>\n              </View>\n            )}\n            disableRightSwipe={true}\n            previewOpenDelay={3000}\n            friction={1000}\n            tension={40}\n            leftOpenValue={75}\n            stopLeftSwipe={75}\n            rightOpenValue={-75}\n          />\n          <View style={styles.bottomContainer}>\n            <Left>\n                <Text style={styles.price}>$ {totalPrice}</Text>\n            </Left>\n            <Right>\n                <EasyButton\n                  danger\n                  medium\n                  onPress={() => props.clearCart()}\n                >\n                  <Text style={{ color: 'white' }}>Clear</Text>\n                </EasyButton>\n            </Right>\n            <Right>\n              {context.stateUser.isAuthenticated ? (\n                <EasyButton\n                  primary\n                  medium\n                  onPress={() => props.navigation.navigate('Checkout')}\n                >\n                <Text style={{ color: 'white' }}>Checkout</Text>\n                </EasyButton>\n              ) : (\n                <EasyButton\n                  secondary\n                  medium\n                  onPress={() => props.navigation.navigate('Login')}\n                >\n                <Text style={{ color: 'white' }}>Login</Text>\n                </EasyButton>\n              )}\n                \n            </Right>\n          </View>\n        </Container>\n      ) : (\n        <Container style={styles.emptyContainer}>\n          <Text>Looks like your cart is empty</Text>\n          <Text>Add products to your cart to get started</Text>\n        </Container>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { cartItems } = state;\n  return {\n    cartItems: cartItems,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    clearCart: () => dispatch(actions.clearCart()),\n    removeFromCart: (item) => dispatch(actions.removeFromCart(item))\n    }\n}\n\nconst styles = StyleSheet.create({\n  emptyContainer: {\n    height: height,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  bottomContainer: {\n      flexDirection: 'row',\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      backgroundColor: 'white',\n      elevation: 20\n  },\n  price: {\n      fontSize: 18,\n      margin: 20,\n      color: 'red'\n  },\n  hiddenContainer: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    flexDirection: 'row'\n  },\n  hiddenButton: {\n    backgroundColor: 'red',\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n    paddingRight: 25,\n    height: 70,\n    width: width / 1.2\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\n"]},"metadata":{},"sourceType":"module"}