{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport DropDownPicker from 'react-native-dropdown-picker';\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { ProgressBarAndroid } from \"react-native-web/dist/index\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ImageScreen = function (_React$Component) {\n  _inherits(ImageScreen, _React$Component);\n\n  var _super = _createSuper(ImageScreen);\n\n  function ImageScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ImageScreen);\n\n    _this = _super.call(this, props);\n\n    _this.itemSeparator = function () {\n      return _jsx(View, {\n        style: {\n          height: .5,\n          width: \"100%\",\n          backgroundColor: \"#000\"\n        }\n      });\n    };\n\n    _this.state = {\n      loading: true,\n      dataSource: []\n    };\n    return _this;\n  }\n\n  _createClass(ImageScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var response, responseJson;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch('https://jsonplaceholder.typicode.com/users'));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              responseJson = _context.sent;\n              this.setState({\n                Loading: false,\n                data: responseJson\n              }, function () {\n                _this2.arrayholder = responseJson;\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 10]], Promise);\n    }\n  }, {\n    key: \"GetFlatListItem\",\n    value: function GetFlatListItem(name) {\n      Alert.alert(name);\n    }\n  }, {\n    key: \"searchData\",\n    value: function searchData(text) {\n      var newData = this.arrayholder.filter(function (item) {\n        var itemData = item.name.toUpperCase();\n        var textData = text.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n      this.setState({\n        data: newData,\n        text: text\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.loading) {\n        return _jsx(View, {\n          style: {\n            flex: 1,\n            paddingTop: 20\n          },\n          children: _jsx(ActivityIndicator, {})\n        });\n      }\n\n      return _jsxs(View, {\n        style: styles.MainContainer,\n        children: [_jsx(TextInput, {\n          style: styles.textInput,\n          onChangeText: function onChangeText(text) {\n            return _this3.searchData(text);\n          },\n          value: this.state.text,\n          underlineColorAndroid: \"transparent\",\n          placeholder: \"Search Here\"\n        }), _jsx(FlatList, {\n          data: this.state.data,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          },\n          ItemSeparatorComponent: this.itemSeparator,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsx(Text, {\n              style: styles.row,\n              onPress: _this3.GetFlatListItem.bind(_this3, item.name),\n              children: item.name\n            });\n          },\n          style: {\n            marginTop: 10\n          }\n        })]\n      });\n    }\n  }]);\n\n  return ImageScreen;\n}(React.Component);\n\nImageScreen.navigationOptions = function (_ref2) {\n  var navigation = _ref2.navigation;\n  return {\n    title: \"Source Listing\",\n    headerStyle: {\n      backgroundColor: \"#000\"\n    },\n    headerTitleStyle: {\n      textAlign: \"center\",\n      flex: 1\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  MainContainer: {\n    justifyContent: 'center',\n    flex: 1,\n    margin: 5\n  },\n  row: {\n    fontSize: 18,\n    padding: 12\n  },\n  textInput: {\n    textAlign: 'center',\n    height: 42,\n    borderWidth: 1,\n    borderColor: '#009688',\n    borderRadius: 8,\n    backgroundColor: \"#FFFF\"\n  }\n});\nexport default ImageScreen;","map":{"version":3,"sources":["/home/theo/Bureau/react/QAM_U/client_Qam/Screens/User/ImageScreen.js"],"names":["DropDownPicker","React","useState","ProgressBarAndroid","ImageScreen","props","itemSeparator","height","width","backgroundColor","state","loading","dataSource","fetch","response","json","responseJson","setState","Loading","data","arrayholder","console","error","name","Alert","alert","text","newData","filter","item","itemData","toUpperCase","textData","indexOf","flex","paddingTop","styles","MainContainer","textInput","searchData","index","toString","row","GetFlatListItem","bind","marginTop","Component","navigationOptions","navigation","title","headerStyle","headerTitleStyle","textAlign","StyleSheet","create","justifyContent","margin","fontSize","padding","borderWidth","borderColor","borderRadius"],"mappings":"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","sourcesContent":["import DropDownPicker from 'react-native-dropdown-picker';\nimport React, { useState } from \"react\";\n\nimport { View, Text, StyleSheet, Button,ProgressBarAndroid,ActivityIndicator } from \"react-native\";\n\n class ImageScreen extends React.Component {  \n  static navigationOptions = ({ navigation }) => {\n    return {\n      title: \"Source Listing\",\n      headerStyle: {backgroundColor: \"#000\"},\n      headerTitleStyle: {textAlign: \"center\",flex: 1}\n     };\n    };\n    constructor(props) {\n     super(props);\n     this.state = {\n       loading: true,\n       dataSource:[]\n      };\n    }\n   \n  async componentDidMount() {\n \n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      const responseJson = await response.json();\n      // console.log(responseJson);\n      this.setState({\n        Loading: false,\n        data: responseJson,\n      }, () => {\n        // In this block you can do something with new state.\n        this.arrayholder = responseJson;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n \n  GetFlatListItem(name) {\n    Alert.alert(name);\n  }\n \n  searchData(text) {\n    const newData = this.arrayholder.filter(item => {\n      const itemData = item.name.toUpperCase();\n      const textData = text.toUpperCase();\n      return itemData.indexOf(textData) > -1\n    });\n \n    this.setState({\n      data: newData,\n      text: text\n      })\n    }\n \n    itemSeparator = () => {\n      return (\n        <View\n          style={{\n            height: .5,\n            width: \"100%\",\n            backgroundColor: \"#000\",\n          }}\n        />\n      );\n    }\n \n    render() {\n      if (this.state.loading) {\n        return (\n          <View style={{flex: 1, paddingTop: 20}}>\n            <ActivityIndicator />\n          </View>\n        );\n      }\n   \n      return (\n   \n        <View style={styles.MainContainer}>\n   \n        <TextInput \n         style={styles.textInput}\n         onChangeText={(text) => this.searchData(text)}\n         value={this.state.text}\n         underlineColorAndroid='transparent'\n         placeholder=\"Search Here\" />\n \n        <FlatList\n          data={this.state.data}\n          keyExtractor={ (item, index) => index.toString() }\n          ItemSeparatorComponent={this.itemSeparator}\n          renderItem={({ item }) => <Text style={styles.row}\n          onPress={this.GetFlatListItem.bind(this, item.name)} >{item.name}</Text>}\n          style={{ marginTop: 10 }} />\n \n      </View>\n    );\n  }\n}\n \nconst styles = StyleSheet.create({\n \n  MainContainer: {\n    justifyContent: 'center',\n    flex: 1,\n    margin: 5,\n \n  },\n \n  row: {\n    fontSize: 18,\n    padding: 12\n  },\n \n  textInput: {\n \n    textAlign: 'center',\n    height: 42,\n    borderWidth: 1,\n    borderColor: '#009688',\n    borderRadius: 8,\n    backgroundColor: \"#FFFF\"\n \n  }\n});\nexport default ImageScreen;"]},"metadata":{},"sourceType":"module"}