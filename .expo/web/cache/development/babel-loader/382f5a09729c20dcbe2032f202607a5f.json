{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport FormContainer from \"../../Shared/Form/FormContainer\";\nimport Input from \"../../Shared/Form/Input\";\nimport Error from \"../../Shared/Error\";\nimport Toast from \"react-native-toast-message\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport EasyButton from \"../../Shared/StyledComponents/EasyButton\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nvar inputs = Array(6).fill('');\nvar newInputIndex = 0;\nimport axios from \"axios\";\nimport baseURL from \"../../assets/common/baseUrl\";\nimport { TextInput, TouchableOpacity } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar isObjValid = function isObjValid(obj) {\n  return Object.values(obj).every(function (val) {\n    return val.trim();\n  });\n};\n\nvar Otp = function Otp(props) {\n  var input = useRef();\n\n  var _useState = useState({\n    1: '',\n    2: '',\n    3: '',\n    4: '',\n    5: '',\n    6: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      OTP = _useState2[0],\n      setOTP = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextInputIndex = _useState4[0],\n      setNextInputIndex = _useState4[1];\n\n  var handleChangeText = function handleChangeText(text, index) {\n    var newOTP = _objectSpread({}, OTP);\n\n    newOTP[index] = text;\n    setOTP(newOTP);\n    var lastInputIndex = inputs.length - 1;\n    if (!text) newInputIndex = index === 0 ? 0 : index - 1;else newInputIndex = index === lastInputIndex ? lastInputIndex : index + 1;\n    setNextInputIndex(newInputIndex);\n  };\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    input.current.focus();\n  }, [nextInputIndex]);\n\n  var submitOTP = function submitOTP() {\n    Keyboard.dismiss();\n\n    if (isObjValid(OTP)) {\n      var val = '';\n      Object.values(OTP).forEach(function (v) {\n        val += v;\n      });\n    }\n  };\n\n  return _jsxs(KeyboardAwareScrollView, {\n    viewIsInsideTabBar: true,\n    extraHeight: 200,\n    enableOnAndroid: true,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Please Verify your phone, code een sent to your phone number.\"\n    }), _jsx(View, {\n      style: styles.otpContainer,\n      children: inputs.map(function (inp, index) {\n        return _jsx(TextInput, {\n          placeholder: \"0\",\n          value: OTP[index],\n          onChangeText: function onChangeText(text) {\n            return handleChangeText(text, index);\n          },\n          style: styles.inputContainer,\n          keyboardType: \"numeric\",\n          maxLength: 1,\n          ref: nextInputIndex === index ? input : null\n        }, index.toString());\n      })\n    }), _jsx(View, {\n      style: styles.buttonGroup,\n      children: _jsx(Text, {\n        children: error ? _jsx(Error, {\n          message: error\n        }) : null\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.IconSUB,\n      onPress: submitOTP,\n      children: _jsx(Icon, {\n        style: {\n          color: \"white\"\n        },\n        size: 24,\n        name: \"check\"\n      })\n    }), _jsx(View, {\n      children: _jsx(EasyButton, {\n        large: true,\n        secondary: true,\n        onPress: function onPress() {\n          return props.navigation.navigate(\"Login\");\n        },\n        children: _jsx(Text, {\n          style: {\n            color: \"white\"\n          },\n          children: \"Back to Login\"\n        })\n      })\n    })]\n  });\n};\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar inputWidth = Math.round(width / 8);\nvar styles = StyleSheet.create({\n  Container: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  heading: {\n    color: '#808080',\n    textAlign: 'center',\n    marginBottom: 15\n  },\n  buttonGroup: {\n    width: \"80%\",\n    margin: 10,\n    alignItems: \"center\"\n  },\n  message: {\n    fontSize: 16,\n    paddingHorizontal: 30,\n    textAlign: 'center'\n  },\n  inputContainer: {\n    width: inputWidth,\n    height: inputWidth,\n    borderWidth: 2,\n    borderColor: '#808080',\n    textAlign: 'center',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  inputOtp: {\n    fontSize: 25,\n    backgroundColor: '#5cb85c'\n  },\n  otpContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: inputWidth / 2,\n    marginTop: 8\n  },\n  spaceotp: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: inputWidth / 2\n  },\n  IconSUB: {\n    alignSelf: 'center',\n    padding: 15,\n    backgroundColor: '#5cb85c',\n    color: \"white\",\n    borderRadius: 50,\n    marginTop: 15\n  }\n});\nexport default Otp;","map":{"version":3,"sources":["/home/theo/Bureau/react/QAM_U/client_Qam/Screens/User/Otp.js"],"names":["React","useEffect","useRef","useState","FormContainer","Input","Error","Toast","KeyboardAwareScrollView","EasyButton","Icon","inputs","Array","fill","newInputIndex","axios","baseURL","TextInput","TouchableOpacity","isObjValid","obj","Object","values","every","val","trim","Otp","props","input","OTP","setOTP","nextInputIndex","setNextInputIndex","handleChangeText","text","index","newOTP","lastInputIndex","length","error","setError","current","focus","submitOTP","Keyboard","dismiss","forEach","v","styles","heading","otpContainer","map","inp","inputContainer","toString","buttonGroup","IconSUB","color","navigation","navigate","Dimensions","get","width","inputWidth","Math","round","StyleSheet","create","Container","flex","justifyContent","textAlign","marginBottom","margin","alignItems","message","fontSize","paddingHorizontal","height","borderWidth","borderColor","inputOtp","backgroundColor","flexDirection","marginTop","spaceotp","alignSelf","padding","borderRadius"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { View, Text, StyleSheet, Button, Dimensions, Keyboard } from \"react-native\";\nimport FormContainer from \"../../Shared/Form/FormContainer\";\nimport Input from \"../../Shared/Form/Input\";\nimport Error from \"../../Shared/Error\";\nimport Toast from \"react-native-toast-message\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport EasyButton from \"../../Shared/StyledComponents/EasyButton\";\nimport Icon from \"react-native-vector-icons/FontAwesome\"\n\n// import { useHistory } from \"react-router-dom\";\n\nconst inputs = Array(6).fill('');//on declare un input de type  tableau pour les inputs otp chaque chiffre aura son carreau\nlet newInputIndex = 0;\n\nimport axios from \"axios\";\nimport baseURL from \"../../assets/common/baseUrl\";\nimport { TextInput, TouchableOpacity } from \"react-native-gesture-handler\";\n// import { handleInputChange } from \"react-select/dist/declarations/src/utils\";\nconst isObjValid = (obj) => {\n return Object.values(obj).every(val => val.trim())\n}\n\n\nconst Otp = (props) => {\n  const input = useRef();\n  // const index = useRef();\n\n  const [OTP, setOTP] = useState({1: '', 2: '', 3: '', 4:'', 5: '', 6:''});\n  const [nextInputIndex, setNextInputIndex] = useState(0);\n\n\n  const handleChangeText = (text,index) =>{ \n    const newOTP = {...OTP };\n    newOTP[index] = text;\n    setOTP(newOTP);\n    \n    const lastInputIndex = inputs.length -  1;\n    if(!text) newInputIndex = index ===  0 ? 0 : index - 1;\n    else newInputIndex = index === lastInputIndex ? lastInputIndex\n    : index + 1;\n    setNextInputIndex(newInputIndex);\n  };\n  // console.log(OTP);\n\n\n  const [error, setError] = useState(\"\"); \n\nuseEffect(() =>{\n  input.current.focus();\n},[nextInputIndex])\n\n   const submitOTP = () => {\n     Keyboard.dismiss();\n     if(isObjValid(OTP)){\n       let val = '';\n       Object.values(OTP).forEach(v => {\n         val += v\n       } )\n     }\n   };\n  return (\n    <KeyboardAwareScrollView\n      viewIsInsideTabBar={true}\n      extraHeight={200}\n      enableOnAndroid={true}\n    >\n              {/* <FormContainer title={\"Enter Code\"}> */}\n\n        \n       \n      <Text style={styles.heading}>\n        Please Verify your phone, code een sent to your phone number.\n      </Text>\n      <View  style={styles.otpContainer}>\n        {inputs.map((inp, index) => {\n          return <TextInput\n          placeholder=\"0\"\n          value={OTP[index]}\n          onChangeText={(text) => handleChangeText(text,index)}\n          style={styles.inputContainer}\n           key={index.toString()}\n          keyboardType={\"numeric\"} \n          maxLength={1}\n          ref={nextInputIndex === index ? input: null}\n\n           />\n\n        })}\n        </View>\n        <View style={styles.buttonGroup}>\n          <Text>\n          {error ? <Error message={error} /> : null}\n          </Text>\n        </View>\n          <TouchableOpacity  style={styles.IconSUB} onPress={submitOTP}>\n          {/* <EasyButton large primary onPress={() => register()}> */}\n          <Icon style={{color: \"white\"}} size={24} name=\"check\" />\n       \n     \n          </TouchableOpacity>\n        <View>\n          <EasyButton\n            large\n            secondary\n            onPress={() => props.navigation.navigate(\"Login\")}\n          >\n            <Text style={{ color: \"white\" }}>Back to Login</Text>\n          </EasyButton>\n        </View>\n        {/* </FormContainer> */}\n    </KeyboardAwareScrollView>\n  );\n};\nconst {width}=Dimensions.get('window')\nconst inputWidth = Math.round(width / 8)\n\nconst styles = StyleSheet.create({\n  Container:{\n    flex: 1,\n    justifyContent: 'center',\n  },\n  heading:{\n     color:'#808080',\n     textAlign: 'center',\n     marginBottom:15,\n  },\n  buttonGroup: {\n    width: \"80%\",\n    margin: 10,\n    alignItems: \"center\",\n  },\n  message: {\n    fontSize: 16,\n    paddingHorizontal: 30,\n    textAlign: 'center',\n  },\n  inputContainer:{\n      width : inputWidth,\n      height: inputWidth,\n      borderWidth: 2,\n      borderColor: '#808080',\n      textAlign: 'center',\n     justifyContent: 'center',\n    alignItems: 'center',\n    // justifyContent: 'space-between',\n\n  },\n  inputOtp:{\n    fontSize: 25,\n    backgroundColor:'#5cb85c', \n\n  },\n  otpContainer:{\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: inputWidth / 2,\n    marginTop: 8,\n  },\n  spaceotp:{\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: inputWidth / 2,\n  },\n  IconSUB:{\n    alignSelf: 'center',\n    padding:15,\n    backgroundColor:'#5cb85c', \n    color: \"white\",\n    borderRadius:50,\n    marginTop:15,\n  }\n});\n\nexport default Otp;\n"]},"metadata":{},"sourceType":"module"}